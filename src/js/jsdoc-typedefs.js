/* Why this file: JSDoc typdefs buried in javascript "modules" require arcane and lengthy syntax (e.g., module:whatever~mytype) that is distracting and unwieldy, especially when it makes the "Type" columns in the HTML tables generated by jsdoc needlessly crazy wide. The downside to putting them here is they do end up in the Globals section (global.html) instead of where they belong, but c'est la vie. */


/** @typedef relationalTest
 * @type {function}
 * @param {string|number|Date} a - Left side of dyadic conditional expression.
 * @param {string|number|Date} b - Right side of dyadic conditional expression.
 * @returns {boolean} The result of comparing `a` and `b`.
 */

/** @typedef relationalSyntax
 * @summary Generates human-readable string syntax from conditionals.
 * @desc The type of the parameters will always be homogeneous and is determined by FilterLeaf's typing algorithm, which attempts to convert the data in it's natural string form to the type sepcified by the field's type, if defined. If both sides cannot be converted, it falls back to strings.
 * @type {function}
 * @param {string|number|Date} a - Left side of dyadic conditional expression.
 * @param {string|number|Date} b - Right side of dyadic conditional expression.
 * @returns {string} Syntax for that expressions a specific relationship between `a` and `b`.
 */

/** @typedef relationalOperator
 * @type {object}
 * @property {relationalTest} test
 * @property {relationalSyntax} make
 * @property {string} [type]
 */
